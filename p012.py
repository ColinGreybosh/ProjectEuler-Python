# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have
# over five divisors.
#
# What is the value of the first triangle number to have over
# five hundred divisors?

import math


def nth_triangle_num(n):
    return int(n * (n + 1) / 2)


def find_num_of_factors(n):
    num_of_factors = 0
    for i in range(1, int(math.ceil(math.sqrt(n) + 1))):
        if n % i == 0:
            num_of_factors += 2
    return num_of_factors


def find_first_triangular_num_with_over_n_factors(n):
    for i in range(int(1e7)):
        tri_num = nth_triangle_num(i)
        num_of_factors = find_num_of_factors(tri_num)
        if num_of_factors > n:
            return tri_num


def main():
    print(find_first_triangular_num_with_over_n_factors(500))


if __name__ == '__main__':
    main()

